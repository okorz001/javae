.TH JAVAE 1
.SH NAME
javae \- compile and execute one-line Java programs
.SH SYNOPSIS
.B javae
[\fB\-adhnp\fR]
[\fB\-F\fR \fIPATTERN\fR]
[\fB\-m\fR \fICLASS\fR]
[\fB\-M\fR \fIMEMBER\fR]
.RS
[\fIPROGRAM\fR]
[\fIARGUMENTS\fR ...]
.RE
.SH DESCRIPTION
\fBjavae\fR is a utility for compiling and running Java programs directly from
the command line.
It is heavily inspired by the \fB\-e\fR option of \fBperl\fR.
.PP
\fIPROGRAM\fR consists of zero or more Java statements.
The statements are wrapped in a class definition similar to:
.PP
.nf
.RS
public class SCRIPT {
  public static void main(String[] ARGV) throws Exception {
    // PROGRAM goes here
  }
}
.RE
.fi
.PP
The generated class is immediately compiled and executed.
.SS Pre-defined Variables and Methods
\fBjavae\fR inserts several variables and methods into the generated class
that may be referenced in \fIPROGRAM\fR.
.TP
\fIString[]\fR \fBARGV\fR
The command line arguments, \fIARGUMENTS\fR.
.TP
\fIString\fR \fBFILE\fR
The name of the current file, or "-" for \fBSystem.in\fR.
Only defined when \fB\-n\fR or \fB\-p\fR is used.
.TP
\fIString\fR \fBLINE\fR
The current line.
Only defined when \fB\-n\fR or \fB\-p\fR is used.
.TP
\fIString[]\fR \fBFIELDS\fR
The fields of the current line.
Only defined when \fB\-a\fR is used.
.TP
\fIvoid\fR \fBprint\fR(\fIObject it\fR)
Convenience method that forwards to \fBSystem.out.print()\fR.
.TP
\fIvoid\fR \fBprintln\fR(\fIObject it\fR)
Convenience method that forwards to \fBSystem.out.println()\fR.
.TP
\fIvoid\fR \fBprintf\fR(\fIString format\fR, \fIObject... args\fR)
Convenience method that forwards to \fBSystem.out.printf()\fR.
.SH OPTIONS
.TP
\fB\-a\fR
Enable autosplitting of lines.
When used with \fB\-n\fR or \fB\-p\fR, the fields (parts) of the current line
are available in the \fBFIELDS\fR variable which is of type \fIString[]\fR.
By default, fields are split by whitespace.
.TP
\fB\-d\fR
Dump the source of the generated class and exit without compiling.
.TP
\fB\-F\fR \fIPATTERN\fR
Change the pattern used for splitting with \fB\-a\fR.
\fIPATTERN\fR is compiled with \fBjava.util.regex.Pattern.compile()\fR and
must obey the same escaping rules as a \fIString\fR literal.
.TP
\fB\-h\fR
Print a summary of the command line options and exit.
.TP
\fB\-m\fR \fICLASS\fR
Add an import for \fICLASS\fR.
\fICLASS\fR may be a specific class or a wildcard.
This option may be specified multiple times.
.TP
\fB\-M\fR \fIMEMBER\fR
Add a static import for \fIMEMBER\fR.
\fIMEMBER\fR may be a specific member or a wildcard.
This option may be specified multiple times.
.TP
\fB\-n\fR
Execute the \fIPROGRAM\fR once for every line of input.
If \fIARGUMENTS\fR are provided, then they are interpreted as filenames and
each file is read and processed in order.
Otherwise, lines are read from \fBSystem.in\fR.
The special filename "-" can be used to explicitly refer to \fBSystem.in\fR
in \fIARGUMENTS\fR.
.br

.br
The current filename is available in the \fBFILE\fR variable which is of type
\fIString\fR.
The current line is available in the \fBLINE\fR variable which is of type
\fIString\fR.
.TP
\fB\-p\fR
Like \fB-n\fR, but appends an implicit "println(LINE);" to \fIPROGRAM\fR.
.SH EXAMPLES
Get the current Unix timestamp:
.PP
.nf
.RS
$ javae 'println(System.currentTimeMillis());'
1568003592358
.RE
.fi
.PP
Get the current UTC timestamp:
.PP
.nf
.RS
$ javae -M java.time.Instant.* 'println(now());'
2019-09-24T21:03:55.664Z
.RE
.fi
.PP
Get users with /bin/sh shell:
.PP
.nf
.RS
$ javae -naF: \\
    'if (FIELDS.length >= 7 &&
         FIELDS[6].equals("/bin/sh"))
       println(FIELDS[0]);' \\
    /etc/passwd
root
.RE
.fi
.SH SEE ALSO
\fBjava\fR(1), \fBjavac\fR(1), \fBperl\fR(1), \fBperlrun\fR(1)
.PP
Repository:
.RS
https://github.com/okorz001/javae
.RE
