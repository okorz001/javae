#!/bin/sh
set -e

help() {
  cat <<EOF
javae - "perl -e" for Java

EOF
  usage 0
}

usage() {
  cat <<EOF
usage: javae [options] [--] function [argument...]
  -h, --help        Display this help message and quit
  -d                Dump temporary Java source file and quit
  -m CLASS          Import CLASS (or wildcard) in the Java source file
  -M MEMBER         Static import MEMBER (or wildcard) in the Java source file
  -n                Execute for every line of input
  -p                Like -n but with implicit println(LINE);
EOF
  exit "${1:-1}"
}

# a single new line character: "\n"
newline="
"

import=
dump=
readLines=
printLine=
while getopts ":hdm:M:np-:" opt; do
  case "$opt" in
    h)
      help
      ;;
    d)
      dump=1
      ;;
    m)
      import="${import}import $OPTARG;$newline"
      ;;
    M)
      import="${import}import static $OPTARG;$newline"
      ;;
    n)
      readLines=1
      printLine=
      ;;
    p)
      readLines=1
      printLine=1
      ;;
    -)
      # simulate GNU long options
      case "$OPTARG" in
        help)
          help
          ;;
        *)
          echo "unknown option: --$OPTARG" >&2
          usage
      ;;
      esac
      ;;
    ?)
      echo "unknown option: -$OPTARG" >&2
      usage
      ;;
  esac
done
shift $((OPTIND - 1))

# Create temporary dir for Java source and class.
# Make sure we delete it afterwards, no matter what.
dir=
cleanup() {
  if [ -n "$dir" ]; then
    rm -rf "$dir"
  fi
}
trap cleanup EXIT
# TODO: mktemp is not POSIX
dir=$(mktemp -d)

# pseudo-template with heredocs
class=SCRIPT
file="$dir/$class.java"
cat /dev/null >"$file"
if [ -n "$import" ]; then
  cat >>"$file" <<EOF
$import
EOF
fi
cat >>"$file" <<EOF
public class $class {
  public static void main(String[] ARGV) throws Exception {
EOF
if [ -n "$readLines" ]; then
  cat >>"$file" <<EOF
    try (java.io.BufferedReader in =
           new java.io.BufferedReader(
             new java.io.InputStreamReader(System.in))) {
      String LINE;
      while ((LINE = in.readLine()) != null) {
        $1
EOF
  if [ -n "$printLine" ]; then
    cat >>"$file" <<EOF
        println(LINE);
EOF
  fi
  cat >>"$file" <<EOF
      }
    }
EOF
else
  cat >>"$file" <<EOF
    $1
EOF
fi
cat >>"$file" <<EOF
  }
  public static void print(Object it) {
    System.out.print(it);
  }
  public static void println(Object it) {
    System.out.println(it);
  }
  public static void printf(String fmt, Object... args) {
    System.out.printf(fmt, args);
  }
}
EOF

if [ -n "$dump" ]; then
  cat "$file"
else
  javac "$file"
  java -cp "$dir" "$class"
fi
